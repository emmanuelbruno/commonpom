<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- The Version in the Maven coordinates is autogenerated by the jgit-flow maven plugin -->
    <groupId>fr.univtln.bruno</groupId>
    <artifactId>CommonPOM</artifactId>
    <version>0.2-reports-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>CommonPOM</name>
    <description>A common pom for easy C.I.</description>
    <url>https://github.com/emmanuelbruno/commonpom</url>
    <inceptionYear>2015</inceptionYear>

    <issueManagement>
        <system>GitHub Issues</system>
        <url>https://github.com/emmanuelbruno/commonpom/issues</url>
    </issueManagement>

    <ciManagement>
        <system>Jenkins</system>
        <url>https://jenkins.lsis.univ-tln.fr/job/emmanuelbruno/job/javatest</url>
    </ciManagement>

    <organization>
        <name>Université de Toulon</name>
        <url>http://www.univ-tln.fr</url>
    </organization>

    <developers>
        <developer>
            <id>emmanuelbruno</id>
            <name>Emmanuel Bruno</name>
            <email>bruno@univ-tln.fr</email>
            <url>http://bruno.univ-tln.fr</url>
            <organization>Université de Toulon</organization>
            <organizationUrl>http://www.univ-tln.fr</organizationUrl>
            <roles>
                <role>architect</role>
                <role>developer</role>
            </roles>
            <timezone>Europe/Paris</timezone>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:git@github.com:emmanuelbruno/javatest.git</connection>
        <url>https://github.com/emmanuelbruno/javatest</url>
    </scm>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
        <github.global.server>github</github.global.server>
    </properties>

    <profiles>
        <!-- this profile may be activated to deploy maven artifact to the
            LSIS nexus server https://nexus.lsis.univ-tln.fr/
            The credentials must be given in ~/.m2/settings.xml
            -->
        <!-- DO NOT USE, WORK IN PROGRESS-->
        <profile>
            <id>nexus</id>
            <distributionManagement>
                <repository>
                    <id>lsis-nexus</id>
                    <name>lsis-nexus-releases</name>
                    <url>https://nexus.lsis.univ-tln.fr/nexus/bruno</url>
                </repository>
                <snapshotRepository>
                    <id>lsis-nexus</id>
                    <name>lsis-nexus-snapshots</name>
                    <url>https://nexus.lsis.univ-tln.fr/nexus/bruno</url>
                </snapshotRepository>
            </distributionManagement>
        </profile>

        <!-- this profile may be activated to pull and deploy maven artifact to the
            LSIS artifactory server https://artifactory.lsis.univ-tln.fr/artifactory.
            The credentials must be given in ~/.m2/settings.xml
              <servers>
                ...
                <server>
                  <id>lsis-artifactory</id>
                  <username>UTLN_LOGIN</username>
                  <password>UTLN_PASSWORD</password>
                </server>
                <server>
                  <id>lsis-artifactory-snapshots</id>
                  <username>UTLN_LOGIN</username>
                  <password>UTLN_PASSWORD</password>
                </server>
                ...
              </servers>
            -->
        <profile>
            <id>artifactory</id>
            <distributionManagement>
                <repository>
                    <id>lsis-artifactory</id>
                    <name>lsis-artifactory-releases</name>
                    <url>https://artifactory.lsis.univ-tln.fr/artifactory/bruno</url>
                </repository>
                <snapshotRepository>
                    <id>lsis-artifactory</id>
                    <name>lsis-artifactory-snapshots</name>
                    <url>https://artifactory.lsis.univ-tln.fr/artifactory/bruno</url>
                </snapshotRepository>
            </distributionManagement>

            <repositories>
                <!-- Repositories used as maven central proxy for faster download -->
                <repository>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                    <id>central</id>
                    <name>libs-release</name>
                    <url>https://artifactory.lsis.univ-tln.fr/artifactory/libs-release</url>
                </repository>
                <repository>
                    <snapshots/>
                    <id>snapshots</id>
                    <name>libs-snapshot</name>
                    <url>https://artifactory.lsis.univ-tln.fr/artifactory/libs-snapshot</url>
                </repository>

                <!-- Private maven repository -->
                <repository>
                    <id>lsis-artifactory</id>
                    <name>lsis-artifactory-releases</name>
                    <url>https://artifactory.lsis.univ-tln.fr/artifactory/bruno</url>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                    <id>central</id>
                    <name>plugins-release</name>
                    <url>https://artifactory.lsis.univ-tln.fr/artifactory/plugins-release</url>
                </pluginRepository>
                <pluginRepository>
                    <snapshots/>
                    <id>snapshots</id>
                    <name>plugins-snapshot</name>
                    <url>https://artifactory.lsis.univ-tln.fr/artifactory/plugins-snapshot</url>
                </pluginRepository>
            </pluginRepositories>
        </profile>

        <!--
        This profile push the maven site to a github branch
        to make a public site with github pages (https://pages.github.com/).

        first adds github authentication in ~/.m2/settings.xml
            <servers>
                <server>
                    <id>github</id>
                    <password>OAUTH2TOKEN</password>
                </server>
            </servers>

        mvn site -P github-site
        -->
        <profile>
            <id>github-site</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.github.github</groupId>
                        <artifactId>site-maven-plugin</artifactId>
                        <version>0.12</version>
                        <configuration>
                            <message>Creating site for ${project.version}</message>
                            <path>docs</path>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>site</goal>
                                </goals>
                                <phase>site</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <!-- These dependencies configuration is centralized
    but they have to be explicitly added to the children projects
    -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.12</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <finalName>${project.artifactId}</finalName>

        <!-- Centralized plugin configuration. These plugins have to be
        explicitly activated in children projects. Versions are given to ensure
        build repeatability. -->
        <pluginManagement>
            <plugins>
                <!-- The maven compiler. https://maven.apache.org/plugins/maven-compiler-plugin/
                It sets the source and target java version.
                mvn compile
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.5.1</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                    </configuration>
                </plugin>

                <!-- Creates a jar of the sources of the project in the target directory.
                https://maven.apache.org/plugins/maven-source-plugin/
                mvn source:jar
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.0.1</version>
                </plugin>

                <!-- Cleans the projects working directory
                https://maven.apache.org/plugins/maven-clean-plugin/
                mvn clean:clean
                It can be used with other phases/goals
                mvn clean package
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>

                <!-- Generates the javadoc. Private members are shown.
                see <reporting> below for a public only version
                https://maven.apache.org/plugins/maven-javadoc-plugin/
                mvn javadoc:javadoc
                mvn javadoc:javadoc-jar
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>2.10.4</version>
                    <configuration>
                        <show>private</show>
                    </configuration>
                </plugin>

                <!-- Deploy maven artifacts to a repository
                http://maven.apache.org/plugins/maven-deploy-plugin/
                mvn deploy
                mvn deploy:deploy
                mvn deploy:deploy-file

                see <distributionManagement> above
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>

                <!-- Maven utilities :
                  - adds sources, test, resources directories, ...
                  mvn build-helper:add-source
                  mvn build-helper:add-test-source
                  mvn build-helper:add-resource
                  mvn build-helper:add-test-resource
                  - parses artifact version
                  - removes project artifact from the local repository
                  mvn build-helper:remove-project-artifact
                  ...
                http://www.mojohaus.org/build-helper-maven-plugin/index.html
                -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>1.12</version>
                </plugin>

                <!-- Executes unite test and Generates reports (target/surefire-reports).
                http://maven.apache.org/surefire/maven-surefire-plugin/
                mvn test

                to avoid test execution :
                mvn install -DskipTests

                to avoid test compilation, execution and concerns integration test (see failsafe plugin):
                mvn install -Dmaven.test.skip=true

                see junit plugin
                -->
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.19.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-report-plugin</artifactId>
                    <version>2.19.1</version>
                    <configuration>
                        <aggregate>true</aggregate>
                        <linkXRef>true</linkXRef>
                    </configuration>
                </plugin>

                <!-- runs integration tests.
                mvn verify
                http://maven.apache.org/surefire/maven-failsafe-plugin/
                See docker profile to bind needed servers (web, database, ...)
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>2.19.1</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>integration-test</goal>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- Generate of web site for the project. It includes static and dynamic pages,
                and several reports.
                See <reporting> below.
                See the directory src/site in simplejava exemple .
                https://maven.apache.org/plugins/maven-site-plugin/

                mvn site

                The site can be deployed after generation (copied with scp or other protocols)
                with mvn site-deploy. Add
                <distributionManagement>
                    <site>
                      <id>www.yourcompany.com</id>
                      <url>scp://www.yourcompany.com/www/docs/project/</url>
                    </site>
                </distributionManagement>
                to the project.

                mvn site:run launches a web server see http://localhost:8080/
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.5.1</version>
                    <configuration>
                        <locales>en,fr</locales>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.apache.maven.doxia</groupId>
                            <artifactId>doxia-module-markdown</artifactId>
                            <version>1.7</version>
                        </dependency>
                    </dependencies>
                    <executions>
                        <execution>
                            <id>attach-descriptor</id>
                            <goals>
                                <goal>attach-descriptor</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- This plugins implements the gitflow branching model (http://nvie.com/git-model,
                https://www.atlassian.com/git/tutorials/comparing-workflows/#!workflow-gitflow )
                for maven. It gives an automatic way to manage versions and branches.
                https://bitbucket.org/atlassian/jgit-flow/wiki/Home

                mvn jgitflow:feature-start:
                  creates a new feature branch; pushes the branch to origin automatically (can be shared and
                  used by jenkins).
                mvn jgitflow:feature-finish:
                  merges the feature branch back into the development branch and pushes to origin.
                    The good way :
                        git fetch : make sure your local repo copy is up-to-date
                        git checkout development : go to development
                        git merge origin/development : make sure your local develop is up-to-date (origin being the remote's name here)
                        git checkout <feature-branch> : go to you feature branch again
                        git merge develop : Merge and solve conflicts, if any (on you feature branch)
                        mvn jgitflow:feature-finish you already solved the conflicts
                mvn jgitflow:release-start:
                   creates a release branch (freeze to prepare a release, only bugfix, documentation
                   and translation) and pushes it to origin.
                mvn jgitflow:release-finish:
                   builds, tags and merges the release branch back into master and development;
                   updates versions in master and development branches
                mvn jgitflow:hotfix-start: like mvn jgitflow:release-start but branches off of master
                mvn jgitflow:hotfix-finish: like mvn jgitflow:release-finish

                We forbid deploy from the workstations, it has to be done by the C.I. server.
                -->
                <plugin>
                    <groupId>external.atlassian.jgitflow</groupId>
                    <artifactId>jgitflow-maven-plugin</artifactId>
                    <version>1.0-m5.1</version>
                    <configuration>
                        <!-- Enable this to push to origin using SSH keys -->
                        <enableSshAgent>true</enableSshAgent>
                        <!-- Keep your maven submodules at the same version as the parent POM -->
                        <autoVersionSubmodules>true</autoVersionSubmodules>
                        <!-- Pushing in-development features to origin allows all devs to see what each other
                             are working on                                        -->
                        <pushFeatures>true</pushFeatures>
                        <!-- This allows the CI server (e.g. Jenkins) to automatically push new releases to
                             origin; you can then either manually deploy them or, if you are doing Continuous
                             Deployments, auto-deploy them to prod -->
                        <pushReleases>true</pushReleases>
                        <pushHotfixes>true</pushHotfixes>

                        <!-- append the feature name to the version on the feature branch. -->
                        <enableFeatureVersions>true</enableFeatureVersions>
                        <!-- Prevents deployments from dev workstations so that they can be done by a CI
                             server  -->
                        <noDeploy>true</noDeploy>

                        <!-- squash>true</squash -->

                        <flowInitContext>
                            <masterBranchName>master</masterBranchName>
                            <developBranchName>development</developBranchName>
                            <featureBranchPrefix>feature-</featureBranchPrefix>
                            <releaseBranchPrefix>release-</releaseBranchPrefix>
                            <hotfixBranchPrefix>hotfix-</hotfixBranchPrefix>
                            <versionTagPrefix>${project.artifactId}-</versionTagPrefix>
                        </flowInitContext>
                    </configuration>
                </plugin>

                <!-- Builds a jar that can merge the artifact and its dependencies
                https://maven.apache.org/plugins/maven-shade-plugin/
                WARNING minimizeJar can cause trouble, disable it in the child project if needed

                The manifest mainclass can be given with the property ${app.main.class}.

                Its is added to the package phase.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>2.4.3</version>
                    <configuration>
                        <createDependencyReducedPom>true</createDependencyReducedPom>
                        <minimizeJar>true</minimizeJar>
                        <filters>
                            <filter>
                                <artifact>*:*</artifact>
                                <excludes>
                                    <exclude>META-INF/*.SF</exclude>
                                    <exclude>META-INF/*.DSA</exclude>
                                    <exclude>META-INF/*.RSA</exclude>
                                </excludes>
                            </filter>
                        </filters>
                        <transformers>
                            <transformer
                                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                <manifestEntries>
                                    <Main-Class>${app.main.class}</Main-Class>
                                </manifestEntries>
                            </transformer>
                        </transformers>
                    </configuration>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>shade</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- plugins that permits docker images building and running.
                https://dmp.fabric8.io/
                -->
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>0.15.16</version>
                </plugin>

            </plugins>
        </pluginManagement>
        <plugins>
        </plugins>
    </build>

    <!-- See maven:site plugin -->
    <reporting>
        <excludeDefaults>true</excludeDefaults>
        <outputDirectory>${project.build.directory}/site</outputDirectory>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.4</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>cim</report>
                            <report>dependencies</report>
                            <report>distribution-management</report>
                            <report>index</report>
                            <report>project-team</report>
                            <report>mailing-list</report>
                            <report>issue-tracking</report>
                            <report>license</report>
                            <report>scm</report>
                            <report>summary</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <!-- A specific version of the javadoc for the web site
            with only public members -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.4</version>
                <configuration>
                    <show>public</show>
                </configuration>
            </plugin>
        </plugins>
    </reporting>

</project>
