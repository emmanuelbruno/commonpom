<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <properties>
        <projectShortName>commonpom</projectShortName>
        <github.account>emmanuelbruno</github.account>
        <!-- for nexus (maven and docker ) repository on lsis -->
        <lsisnexus.login>bruno</lsisnexus.login>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <github.global.server>github</github.global.server>
        <jackson.version>2.9.1</jackson.version>
        <hibernate.version>5.2.12.Final</hibernate.version>
    </properties>

    <!-- The Version in the Maven coordinates is autogenerated by the jgit-flow maven plugin -->
    <groupId>fr.univtln.bruno.pom</groupId>
    <artifactId>common-pom</artifactId>
    <version>0.7.32-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>CommonPOM</name>
    <description>A common pom for easy C.I.</description>
    <url>https://${github.account}.github.io/${projectShortName}/</url>
    <inceptionYear>2015</inceptionYear>

    <organization>
        <name>Université de Toulon</name>
        <url>http://www.univ-tln.fr</url>
    </organization>

    <developers>
        <developer>
            <id>emmanuelbruno</id>
            <name>Emmanuel Bruno</name>
            <email>bruno@univ-tln.fr</email>
            <url>http://bruno.univ-tln.fr</url>
            <organization>Université de Toulon</organization>
            <organizationUrl>http://www.univ-tln.fr</organizationUrl>
            <roles>
                <role>architect</role>
                <role>developer</role>
            </roles>
            <timezone>Europe/Paris</timezone>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:git@github.com:${github.account}/${projectShortName}.git</connection>
        <url>https://github.com/${github.account}/${projectShortName}/tree/${project.scm.tag}</url>
    </scm>

    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/${github.account}/${projectShortName}/issues</url>
    </issueManagement>

    <ciManagement>
        <!--system>Jenkins</system>
        <url>https://jenkins.lsis.univ-tln.fr/job/${github.account}/job/${projectShortName}</url-->
        <system>Travis</system>
        <url>https://travis-ci.org/${github.account}/${projectShortName}</url>
    </ciManagement>

    <profiles>
        <!-- Three profiles to set the maven/docker repository/registry used to push/pull/deploy artifacts/images.
        -->
        <profile>
            <id>stage-devel-bintray</id>
            <distributionManagement>
                <repository>
                    <id>bintray-dptinfoutln-public</id>
                    <name>dptinfoutln-public</name>
                    <url>https://api.bintray.com/maven/dptinfoutln/public/${projectShortName}/;publish=1</url>
                </repository>
            </distributionManagement>
        </profile>

        <profile>
            <id>stage-devel-nexus</id>
            <repositories>
                <repository>
                    <id>lsis-nexus-${lsisnexus.login}</id>
                    <name>lsis-nexus-${lsisnexus.login}</name>
                    <url>https://nexus.lsis.univ-tln.fr/repository/maven-${lsisnexus.login}-devel/</url>
                </repository>
            </repositories>
            <distributionManagement>
                <repository>
                    <id>lsis-nexus</id>
                    <name>lsis-nexus-releases</name>
                    <url>https://nexus.lsis.univ-tln.fr/repository/maven-${lsisnexus.login}-devel/</url>
                </repository>
                <snapshotRepository>
                    <id>lsis-nexus</id>
                    <name>lsis-nexus-snapshots</name>
                    <url>https://nexus.lsis.univ-tln.fr/repository/maven-${lsisnexus.login}-devel/</url>
                </snapshotRepository>
            </distributionManagement>
            <properties>
                <docker.pull.registry>hub-docker.lsis.univ-tln.fr</docker.pull.registry>
                <docker.push.registry>docker-${lsisnexus.login}-devel.lsis.univ-tln.fr</docker.push.registry>
            </properties>
        </profile>
        <profile>
            <id>stage-staging</id>
            <repositories>
                <repository>
                    <id>lsis-nexus-${lsisnexus.login}</id>
                    <name>lsis-nexus-${lsisnexus.login}</name>
                    <url>https://nexus.lsis.univ-tln.fr/repository/maven-${lsisnexus.login}-devel/</url>
                </repository>
            </repositories>
            <distributionManagement>
                <repository>
                    <id>lsis-nexus</id>
                    <name>lsis-nexus-staging</name>
                    <url>https://nexus.lsis.univ-tln.fr/repository/maven-${lsisnexus.login}-devel/</url>
                </repository>
            </distributionManagement>
            <properties>
                <docker.pull.registry>hub-docker.lsis.univ-tln.fr</docker.pull.registry>
                <docker.push.registry>docker-${lsisnexus.login}-devel.lsis.univ-tln.fr</docker.push.registry>
            </properties>
        </profile>
        <profile>
            <id>stage-production</id>
            <repositories>
                <repository>
                    <id>lsis-nexus-${lsisnexus.login}</id>
                    <name>lsis-nexus-${lsisnexus.login}</name>
                    <url>https://nexus.lsis.univ-tln.fr/repository/maven-${lsisnexus.login}-devel/</url>
                </repository>
            </repositories>
            <distributionManagement>
                <repository>
                    <id>lsis-nexus</id>
                    <name>lsis-nexus-${lsisnexus.login}</name>
                    <url>https://nexus.lsis.univ-tln.fr/repository/maven-${lsisnexus.login}-devel/</url>
                </repository>
            </distributionManagement>
            <properties>
                <docker.pull.registry>hub-docker.lsis.univ-tln.fr</docker.pull.registry>
                <docker.push.registry>docker-${lsisnexus.login}-devel.lsis.univ-tln.fr</docker.push.registry>
            </properties>
        </profile>

        <!--
        This profile push the maven site to a github branch
        to make a public site with github pages (https://pages.github.com/).

        first adds github authentication in ~/.m2/settings.xml
            <servers>
                <server>
                    <id>github</id>
                    <password>OAUTH2TOKEN</password>
                </server>
            </servers>

        mvn site -P github-site
        -->
        <profile>
            <id>github-site</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.github.github</groupId>
                        <artifactId>site-maven-plugin</artifactId>
                        <version>0.12</version>
                        <configuration>
                            <message>Creating site for ${project.version}</message>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>site</goal>
                                </goals>
                                <phase>site</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <!-- These dependencies configuration is centralized
    but they have to be explicitly added to the children projects
    -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.12</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>5.0.0</version>
                <scope>test</scope>
            </dependency>
            <!-- Only required to run tests in an IntelliJ IDEA that bundles an older version -->
            <dependency>
                <groupId>org.junit.platform</groupId>
                <artifactId>junit-platform-launcher</artifactId>
                <version>1.0.0</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>5.0.0</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.vintage</groupId>
                <artifactId>junit-vintage-engine</artifactId>
                <version>4.12.0</version>
                <scope>test</scope>
            </dependency>


            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>42.1.4.jre7</version>
            </dependency>

            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>6.0.6</version>
            </dependency>

            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>1.4.196</version>
            </dependency>

            <!-- Logging with sl4j and one of : -->
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.2.3</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>1.7.22</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-jdk14</artifactId>
                <version>1.7.22</version>
            </dependency>

            <dependency>
                <groupId>javax.ws.rs</groupId>
                <artifactId>javax.ws.rs-api</artifactId>
                <version>2.1</version>
            </dependency>

            <!--jackson json -->
            <dependency>
                <groupId>com.fasterxml.jackson</groupId>
                <artifactId>jackson-bom</artifactId>
                <version>${jackson.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>

            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>${jackson.version}</version>

            </dependency>
            <!-- the core, which includes Streaming API, shared low-level abstractions (but NOT data-binding) -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson.version}</version>

            </dependency>
            <!-- databinding; ObjectMapper, JsonNode and related classes are here -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>

            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-jsr310</artifactId>
                <version>${jackson.version}</version>

            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-jaxrs</artifactId>
                <version>${jackson.version}</version>
            </dependency>

            <!-- JPA -->
            <dependency>
                <groupId>javax.persistence</groupId>
                <artifactId>javax.persistence-api</artifactId>
                <version>2.2</version>
            </dependency>

            <!-- Eclipse Link -->
            <dependency>
                <groupId>org.eclipse.persistence</groupId>
                <artifactId>eclipselink</artifactId>
                <version>2.7.0</version>
            </dependency>

            <!-- JPA Hibernate -->
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-entitymanager</artifactId>
                <version>${hibernate.version}</version>
                <exclusions>
                    <exclusion>
                        <!-- convergence with bean validation -->
                        <groupId>com.fasterxml</groupId>
                        <artifactId>classmate</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <!-- Hibernate For connection pooling -->
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-c3p0</artifactId>
                <version>${hibernate.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-dbcp2</artifactId>
                <version>2.1.1</version>
            </dependency>

            <!-- Bean validation -->
            <dependency>
                <groupId>javax.validation</groupId>
                <artifactId>validation-api</artifactId>
                <version>2.0.0.Final</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-validator</artifactId>
                <version>6.0.5.Final</version>
            </dependency>
            <dependency>
                <groupId>javax.el</groupId>
                <artifactId>javax.el-api</artifactId>
                <version>3.0.0</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <!-- Centralized plugin configuration. These plugins have to be
        explicitly activated in children projects. Versions are given to ensure
        build repeatability. -->
        <pluginManagement>
            <plugins>
                <!-- The maven compiler. https://maven.apache.org/plugins/maven-compiler-plugin/
                It sets the source and target java version.
                mvn compile
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.6.0</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                    </configuration>
                </plugin>

                <!-- Creates a jar of the sources of the project in the target directory.
                https://maven.apache.org/plugins/maven-source-plugin/
                mvn source:jar
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.0.1</version>
                    <configuration>
                        <archive>
                            <manifest>
                                <addClasspath>false</addClasspath>
                            </manifest>
                        </archive>
                    </configuration>
                </plugin>

                <!-- Cleans the projects working directory
                https://maven.apache.org/plugins/maven-clean-plugin/
                mvn clean:clean
                It can be used with other phases/goals
                mvn clean package
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.0.2</version>
                    <configuration>
                        <addDefaultExcludes>false</addDefaultExcludes>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-archetype-plugin</artifactId>
                    <version>3.0.1</version>
                </plugin>

                <!-- Generates the javadoc. Private members are shown.
                see <reporting> below for a public only version
                https://maven.apache.org/plugins/maven-javadoc-plugin/
                mvn javadoc:javadoc
                mvn javadoc:javadoc-jar
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>3.0.0-M1</version>
                    <configuration>
                        <show>private</show>
                    </configuration>
                </plugin>

                <!-- Deploy maven artifacts to a repository
                http://maven.apache.org/plugins/maven-deploy-plugin/
                mvn deploy
                mvn deploy:deploy
                mvn deploy:deploy-file

                see <distributionManagement> above
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>

                <!-- Maven utilities :
                  - adds sources, test, resources directories, ...
                  mvn build-helper:add-source
                  mvn build-helper:add-test-source
                  mvn build-helper:add-resource
                  mvn build-helper:add-test-resource
                  - parses artifact version
                  - removes project artifact from the local repository
                  mvn build-helper:remove-project-artifact
                  ...
                http://www.mojohaus.org/build-helper-maven-plugin/index.html
                -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>1.12</version>
                </plugin>

                <!-- Executes unit tests and Generates reports (target/surefire-reports).
                http://maven.apache.org/surefire/maven-surefire-plugin/
                mvn test

                to avoid test execution :
                mvn install -DskipTests

                to avoid test compilation, execution and concerns integration test (see failsafe plugin):
                mvn install -Dmaven.test.skip=true

                see junit plugin
                -->
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.19</version>
                    <dependencies>
                        <dependency>
                            <groupId>org.junit.platform</groupId>
                            <artifactId>junit-platform-surefire-provider</artifactId>
                            <version>1.0.0</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-report-plugin</artifactId>
                    <version>2.19</version>
                    <configuration>
                        <aggregate>true</aggregate>
                        <linkXRef>true</linkXRef>
                    </configuration>
                </plugin>

                <!-- runs integration tests.
                mvn verify
                http://maven.apache.org/surefire/maven-failsafe-plugin/
                See docker profile to bind needed servers (web, database, ...)
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>2.19.1</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>integration-test</goal>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- Generate of web site for the project. It includes static and dynamic pages,
                and several reports.
                See <reporting> below.
                See the directory src/site in simplejava exemple .
                https://maven.apache.org/plugins/maven-site-plugin/

                mvn site

                The site can be deployed after generation (copied with scp or other protocols)
                with mvn site-deploy. Add
                <distributionManagement>
                    <site>
                      <id>www.yourcompany.com</id>
                      <url>scp://www.yourcompany.com/www/docs/project/</url>
                    </site>
                </distributionManagement>
                to the project.

                mvn site:run launches de
                a web server see http://localhost:8080/
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.6</version>
                    <configuration>
                        <locales>en,fr</locales>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.apache.maven.doxia</groupId>
                            <artifactId>doxia-module-markdown</artifactId>
                            <version>1.7</version>
                        </dependency>

                        <!-- Reflow skin requires Velocity >= 1.7  -->
                        <!--dependency>
                            <groupId>lt.velykis.maven.skins</groupId>
                            <artifactId>reflow-velocity-tools</artifactId>
                            <version>1.1.1</version>
                        </dependency>
                        <dependency>
                            <groupId>org.apache.velocity</groupId>
                            <artifactId>velocity</artifactId>
                            <version>1.7</version>
                        </dependency-->

                    </dependencies>
                    <executions>
                        <execution>
                            <id>attach-descriptor</id>
                            <goals>
                                <goal>attach-descriptor</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- This plugins implements the gitflow branching model (http://nvie.com/git-model,
                https://www.atlassian.com/git/tutorials/comparing-workflows/#!workflow-gitflow )
                for maven. It gives an automatic way to manage versions and branches.
                https://bitbucket.org/atlassian/jgit-flow/wiki/Home

                mvn jgitflow:feature-start:
                  creates a new feature branch; pushes the branch to origin automatically (can be shared and
                  used by jenkins).
                mvn jgitflow:feature-finish:
                  merges the feature branch back into the development branch and pushes to origin.
                    The good way :
                        git fetch : make sure your local repo copy is up-to-date
                        git checkout development : go to development
                        git merge origin/development : make sure your local develop is up-to-date (origin being the remote's name here)
                        git checkout <feature-branch> : go to you feature branch again
                        git merge develop : Merge and solve conflicts, if any (on you feature branch)
                        mvn jgitflow:feature-finish you already solved the conflicts
                mvn jgitflow:release-start:
                   creates a release branch (freeze to prepare a release, only bugfix, documentation
                   and translation) and pushes it to origin.
                mvn jgitflow:release-finish:
                   builds, tags and merges the release branch back into master and development;
                   updates versions in master and development branches
                mvn jgitflow:hotfix-start: like mvn jgitflow:release-start but branches off of master
                mvn jgitflow:hotfix-finish: like mvn jgitflow:release-finish

                We forbid deploy from the workstations, it has to be done by the C.I. server.
                -->
                <plugin>
                    <groupId>external.atlassian.jgitflow</groupId>
                    <artifactId>jgitflow-maven-plugin</artifactId>
                    <version>1.0-m5.1</version>
                    <configuration>
                        <!-- Enable this to push to origin using SSH keys -->
                        <enableSshAgent>true</enableSshAgent>
                        <!-- Keep your maven submodules at the same version as the parent POM -->
                        <autoVersionSubmodules>true</autoVersionSubmodules>
                        <!-- Pushing in-development features to origin allows all devs to see what each other
                             are working on                                        -->
                        <pushFeatures>true</pushFeatures>
                        <!-- This allows the CI server (e.g. Jenkins) to automatically push new releases to
                             origin; you can then either manually deploy them or, if you are doing Continuous
                             Deployments, auto-deploy them to prod -->
                        <pushReleases>true</pushReleases>
                        <pushHotfixes>true</pushHotfixes>

                        <!-- append the feature name to the version on the feature branch. -->
                        <enableFeatureVersions>true</enableFeatureVersions>
                        <!-- Prevents deployments from dev workstations so that they can be done by a CI
                             server  -->
                        <noDeploy>true</noDeploy>

                        <!-- Whether to squash commits into a single commit before merging. -->
                        <squash>false</squash>

                        <scmCommentPrefix>[gitflow]</scmCommentPrefix>

                        <!-- A VOIR -->
                        <featureRebase>false</featureRebase>

                        <!--pullDevelop>true</pullDevelop>
                        <pullMaster>true</pullMaster-->

                        <flowInitContext>
                            <masterBranchName>master</masterBranchName>
                            <developBranchName>development</developBranchName>
                            <featureBranchPrefix>feature-</featureBranchPrefix>
                            <releaseBranchPrefix>release-</releaseBranchPrefix>
                            <hotfixBranchPrefix>hotfix-</hotfixBranchPrefix>
                            <versionTagPrefix>v</versionTagPrefix>
                        </flowInitContext>
                    </configuration>
                </plugin>

                <!-- Sets the default class to run with
                mvn exec:java
                -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>1.5.0</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>java</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <!--suppress MavenModelInspection -->
                        <mainClass>${app.main.class}</mainClass>
                    </configuration>
                </plugin>

                <!-- Builds a jar that can merge the artifact and its dependencies
                https://maven.apache.org/plugins/maven-shade-plugin/
                WARNING minimizeJar can cause trouble, disable it in the child project if needed

                The manifest mainclass can be given with the property ${app.main.class}.

                Its is added to the package phase.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>3.1.0</version>
                    <configuration>
                        <createDependencyReducedPom>true</createDependencyReducedPom>
                        <minimizeJar>true</minimizeJar>
                        <!-- The shaded artifact is not the main artifact -->
                        <shadedArtifactAttached>true</shadedArtifactAttached>
                        <shadedClassifierName>withdependencies</shadedClassifierName>
                        <transformers>
                            <!-- makes a default entry point in the shaded jar -->
                            <transformer
                                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                <manifestEntries>
                                    <Main-Class>${app.main.class}</Main-Class>
                                    <X-Compile-Source-JDK>${maven.compile.source}</X-Compile-Source-JDK>
                                    <X-Compile-Target-JDK>${maven.compile.target}</X-Compile-Target-JDK>
                                </manifestEntries>
                            </transformer>

                            <!-- keep a default config file -->
                            <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                <resource>config.properties</resource>
                                <resource>log4j.properties</resource>
                            </transformer>
                        </transformers>

                        <!-- removes signatures in uberjar -->
                        <!--filters>
                            <filter>
                                <artifact>*:*</artifact>
                                <excludes>
                                    <exclude>META-INF/*.SF</exclude>
                                    <exclude>META-INF/*.DSA</exclude>
                                    <exclude>META-INF/*.RSA</exclude>
                                </excludes>
                            </filter>
                        </filters-->

                    </configuration>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>shade</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- plugins that permits docker images building and running.
                https://dmp.fabric8.io/
                -->
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>0.23.0</version>
                    <extensions>true</extensions>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-stage-plugin</artifactId>
                    <version>1.0</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>2.5</version>
                </plugin>

            </plugins>
        </pluginManagement>

        <plugins>
            <!-- This plugins enforce the required environment : maven and jdk version.
            http://maven.apache.org/enforcer/maven-enforcer-plugin/
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M1</version>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.5.0</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>1.8</version>
                                </requireJavaVersion>
                                <!--requireOS>
                                    <family>unix</family>
                                </requireOS-->
                                <!-- requires that dependency version numbers converge -->
                                <!-- dependencyConvergence /-->
                                <!-- checks that the versions within the reactor are consistent
                                furthermore it will check that every module within the project
                                contains a parent and that the parent is part of the reactor build
                                -->
                                <reactorModuleConvergence>
                                    <message>The reactor is not valid</message>
                                    <ignoreModuleDependencies>true</ignoreModuleDependencies>
                                </reactorModuleConvergence>
                                <!-- checks that specified environment variables are set-->
                                <requireEnvironmentVariable>
                                    <variableName>JAVA_HOME</variableName>
                                    <variableName>MAVEN_HOME</variableName>
                                </requireEnvironmentVariable>
                                <!-- checks that  that the version for each dependency resolved
                                during a build, is equal to or higher than all transitive dependency declarations -->
                                <requireUpperBoundDeps>
                                    <!-- 'uniqueVersions' (default:false) can be set to true
                                    if you want to compare the timestamped SNAPSHOTs  -->
                                    <!-- <uniqueVersions>true</uniqueVersions> -->
                                </requireUpperBoundDeps>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


        </plugins>

    </build>

    <!-- See maven:site plugin -->
    <reporting>
        <excludeDefaults>true</excludeDefaults>
        <outputDirectory>${project.build.directory}/site</outputDirectory>
        <plugins>
            <!--plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-changes-plugin</artifactId>
                <version>2.12.1</version>
                <configuration>
                    <githubAPIScheme>https</githubAPIScheme>
                    <githubAPIPort>443</githubAPIPort>
                </configuration>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>github-report</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin-->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
                </configuration>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>cim</report>
                            <report>dependencies</report>
                            <report>dependency-convergence</report>
                            <report>dependency-info</report>
                            <report>dependency-management</report>
                            <report>distribution-management</report>
                            <!--report>help</report-->
                            <report>index</report>
                            <report>issue-tracking</report>
                            <report>license</report>
                            <report>mailing-list</report>
                            <report>modules</report>
                            <report>plugin-management</report>
                            <report>plugins</report>
                            <report>project-team</report>
                            <report>scm</report>
                            <report>summary</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-changelog-plugin</artifactId>
                <version>2.3</version>
            </plugin>

            <!-- A specific version of the javadoc for the web site
            with only public members -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.0.0-M1</version>
                <configuration>
                    <show>public</show>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>2.5</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>dependency-updates-report</report>
                            <report>plugin-updates-report</report>
                            <report>property-updates-report</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <!--plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>2.5</version>
                <reportSets>
                    <reportSet>
                        <id>aggregate</id>
                        <inherited>false</inherited>
                        <reports>
                            <report>aggregate</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin-->
        </plugins>
    </reporting>

</project>
